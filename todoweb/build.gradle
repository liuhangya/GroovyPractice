//plugins {
//    id 'java-library'
//}
apply plugin: 'java'
apply plugin: 'war'
// 该jetty插件废弃了
//apply plugin: 'jetty'
//apply plugin: 'org.akhikhl.gretty'

// 中文乱码问题
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


// 配置 java 相关内容
java {
    // 配置打包后的 jar 的版本名称
    version = 0.1
    // 源代码兼容性配置，目标是 1.8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // 配置通过 jar 命令来运行jar包 java -jar build/libs/todo-0.1.jar
    jar {
        manifest {
            attributes 'Main-Class': 'com.fanda.todo.ToDoApp'
        }
    }

    // 配置输出目录为 out ，其实可以指定任意路径
//    buildDir = 'out'
}

// 配置源代码目录是 src ，而不是 src\main\java
// 配置源测试代码目录是 test ，而不是 test\main\java
/* sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
    test {
         java {
            srcDirs = ['test']
        }
    }
} */

configurations {
    // 声明一个叫 cargo 的新配置
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat {
    doLast {
        FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
        ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

        ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
            configuration {
                deployable(type: 'war', file: 'todo.war')
            }

            zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
        }
    }
}

ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'

// 配置仓库，至少一个，这里配置了 mavenCentral
repositories {
    // 注意仓库声明的顺序，如果前面的仓库已经能够支撑依赖，后面的仓库不会再检测了
//    mavenLocal()
    mavenCentral()
    // 自定义 maven 仓库
   /* maven {
        name 'Custom Maven Repository'
        url 'http://repository-gradle-in-action.forge.cloudbees.com/release/'
    }*/

//    flatDir(dirs:"${projectDir.absolutePath}/mylibs/cargo",name:'Local libs directory' )

}

// 更改默认的依赖解决策略
configurations.cargo.resolutionStrategy {
    // 如果有依赖冲突，构建失败，默认的策略是选择其中的最新的版本（有时候最新版本不是我们所需要的）
//    failOnVersionConflict()
    // 强制依赖固定版本
    force "$cargoGroup:cargo-ant:1.3.0"
    //  如果想时刻获取最新版本的依赖，可以设置缓存刷新时间为0秒超时
    cacheDynamicVersionsFor  0, 'seconds'
}

/* gradle -q dependencyInsight --configuration cargo --dependency xml-apis:xml-apis
    查看特殊依赖的观察报告，显示界面跟普通的依赖报告相反，是从特定依赖开始到配置的
 */

// 配置依赖声明
dependencies {
    // implementation 'org.apache.commons:commons-lang3:3.5'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
/*    cargo ("$cargoGroup:cargo-ant:$cargoVersion") {
        // 其实就是 group 和 name ，不包含 version
        exclude group: 'xml-apis' ,module:'xml-apis'
        // 不使用传递性依赖，全部自己手动依赖
//        transitive =false
    }
    */

    // 声明使用最新版本依赖，固定语法 latest-integration 或使用 +
//    cargo "org.codehaus.cargo:cargo-ant:latest-integration"
//    cargo "org.codehaus.cargo:cargo-ant:1.+"
    cargo "org.codehaus.cargo:cargo-ant:1.3.1"
//    cargo 'xml-apis:xml-apis:1.0.b2'
//    cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion

    // 本地文件依赖
//    cargo fileTree(dir: "${projectDir.absolutePath}/mylibs/cargo", include: '*.jar')

    compileOnly 'javax.servlet:servlet-api:2.5', 'javax.servlet.jsp:jsp-api:2.1'
    runtimeOnly 'javax.servlet:jstl:1.1.2', 'taglibs:standard:1.1.2'


/*    cargo name: 'activation', version: '1.1'
    cargo name: 'ant', version: '1.7.1'
    cargo name: 'ant-launcher', version: '1.7.1'
    cargo name: 'cargo-ant', version: '1.3.1'
    cargo name: 'cargo-core-uberjar', version: '1.3.1'
    cargo name: 'commons-discovery', version: '0.4'
    cargo name: 'commons-logging', version: '1.0.4'
    cargo name: 'dom4j', version: '1.4'
    cargo name: 'isorelax', version: '20020414'
    cargo ':jaxb-api:2.1', ':jaxb-impl:2.1.13', ':jaxen:1.0-FCS', ':jdom:1.0', ':msv:20020414',
            ':relaxngDatatype:20020414', ':saxpath:1.0-FCS', ':stax-api:1.0-2', ':xercesImpl:2.8.1',
            ':xml-apis:1.3.03'
    */
}

task testPath {
    doLast {
        logger.quiet(projectDir.absolutePath)
        logger.quiet(rootDir.absolutePath)
    }
}

// 将远程所有的依赖包 copy 到指定文件夹
task copyDependenciesToLocalDir(type: Copy) {
    from(configurations.cargo.asFileTree)
//    into("${System.properties['user.home']}/libs/cargo")
    // 当前模块的 mylibs/cargo 目录下
//    into("${mkdir('mylibs').absolutePath}/cargo")
    into("${projectDir.absolutePath}/mylibs/cargo")
}

// 将远程第一个依赖包 copy 到指定文件夹，其实可以任意指定想要的远程依赖包
/*task copyDependenciesToLocalDir2(type:Copy){
    from(configurations.cargo.asFileTree.first())
//    into("${System.properties['user.home']}/libs/cargo")
    // 当前模块的 mylibs/cargo 目录下
    into("${mkdir('mylibs').absolutePath}/cargo")
}*/

task cleanMylibs(type: Delete) {
    delete "${projectDir.absolutePath}/mylibs"
}

// 打印本地缓存依赖的本地路径
task printDependencies {
    doLast {
        configurations.getByName('cargo').each {
            println(it)
        }
    }
}


